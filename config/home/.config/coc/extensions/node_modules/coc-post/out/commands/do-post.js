"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var coc_nvim_1 = require("coc.nvim");
var node_fetch_1 = __importDefault(require("node-fetch"));
var channel;
var print = function (channel, name, text, notStartNewLine, inline, fold) {
    !inline && channel.append(("" + (notStartNewLine ? '' : '\n') + name + ": ").padEnd(30, '=') + '<<\n');
    fold && channel.append('{{{\n');
    channel.append("\n" + text + "\n");
    fold && channel.append('\n}}}');
    !inline && channel.append(("\n" + name + ": ").padEnd(30, '=') + '<<\n');
};
exports.doPost = function () { return __awaiter(_this, void 0, void 0, function () {
    var document, text, lines, headers, isPasterHeadersDone, url, method, body, idx, line, m, params, content, contentType, res, text_1, json, error_1;
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!channel) {
                    channel = coc_nvim_1.workspace.createOutputChannel('post');
                }
                return [4 /*yield*/, coc_nvim_1.workspace.document];
            case 1:
                document = _a.sent();
                if (!(document && document.textDocument)) return [3 /*break*/, 6];
                text = document.textDocument.getText();
                if (!text) {
                    return [2 /*return*/];
                }
                lines = text.trim().split('\n');
                headers = {};
                isPasterHeadersDone = false;
                url = '';
                method = 'GET';
                body = [];
                for (idx = 0; idx < lines.length; idx++) {
                    line = lines[idx];
                    if (line.trim() === '') {
                        isPasterHeadersDone = true;
                        continue;
                    }
                    if (!isPasterHeadersDone) {
                        m = line.match(/^[ \t]*([^ \t]+?):[ \t]+(.*)$/);
                        if (m) {
                            if (m[1] === 'Method') {
                                method = m[2];
                            }
                            else if (m[1] === 'URL') {
                                url = m[2];
                            }
                            else {
                                headers[m[1]] = m[2];
                            }
                        }
                    }
                    else {
                        body.push(line);
                    }
                }
                if (!url) return [3 /*break*/, 6];
                _a.label = 2;
            case 2:
                _a.trys.push([2, 5, , 6]);
                params = {
                    method: method,
                    headers: headers,
                };
                content = body.join('\n');
                if (method !== 'GET') {
                    contentType = headers['Content-Type'];
                    if (contentType && /application\/json/.test(contentType)) {
                        try {
                            params['body'] = JSON.stringify(eval("(" + content + ")"));
                        }
                        catch (error) {
                            params['body'] = content;
                        }
                    }
                    else if (contentType && /application\/x-www-form-urlencoded/.test(contentType)) {
                        params['body'] = encodeURI(content);
                    }
                    else {
                        params['body'] = content;
                    }
                }
                channel.clear();
                channel.show();
                print(channel, 'Request', JSON.stringify(__assign({ url: url }, params), null, 2), true);
                return [4 /*yield*/, node_fetch_1.default(url, params)];
            case 3:
                res = _a.sent();
                print(channel, 'Status', "Status: " + res.status + " - " + res.statusText, false, true);
                print(channel, 'Headers', JSON.stringify(res.headers.raw(), null, 2), false, false, true);
                return [4 /*yield*/, res.text()];
            case 4:
                text_1 = _a.sent();
                try {
                    json = JSON.parse(text_1);
                    print(channel, 'Body', JSON.stringify(json, null, 2));
                }
                catch (error) {
                    print(channel, 'Body', text_1);
                }
                setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                    var wins, len, win, buf, name;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, coc_nvim_1.workspace.nvim.windows];
                            case 1:
                                wins = _a.sent();
                                if (!wins) return [3 /*break*/, 6];
                                len = 0;
                                _a.label = 2;
                            case 2:
                                if (!(len < wins.length)) return [3 /*break*/, 6];
                                win = wins[len];
                                return [4 /*yield*/, win.buffer];
                            case 3:
                                buf = _a.sent();
                                return [4 /*yield*/, buf.name];
                            case 4:
                                name = _a.sent();
                                if (name === 'output:///post') {
                                    win.setOption('wrap', false, true);
                                    win.setOption('foldenable', true, true);
                                    win.setOption('foldmethod', 'marker', true);
                                }
                                _a.label = 5;
                            case 5:
                                len++;
                                return [3 /*break*/, 2];
                            case 6: return [2 /*return*/];
                        }
                    });
                }); }, 0);
                return [3 /*break*/, 6];
            case 5:
                error_1 = _a.sent();
                print(channel, 'Error', error_1.stack || error_1.message || error_1);
                return [3 /*break*/, 6];
            case 6: return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=do-post.js.map