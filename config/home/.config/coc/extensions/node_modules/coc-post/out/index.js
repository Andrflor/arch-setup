"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var coc_nvim_1 = require("coc.nvim");
var os_1 = require("os");
var completion_1 = require("./provider/completion");
var do_post_1 = require("./commands/do-post");
var new_post_1 = require("./commands/new-post");
var post_1 = __importDefault(require("./source/post"));
function detectFileName() {
    return __awaiter(this, void 0, void 0, function () {
        var doc, filetype, name;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, coc_nvim_1.workspace.document];
                case 1:
                    doc = _a.sent();
                    if (!(doc && doc.buffer)) return [3 /*break*/, 4];
                    return [4 /*yield*/, doc.buffer.getOption('filetype')];
                case 2:
                    filetype = _a.sent();
                    if (filetype && filetype.trim() !== '') {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, doc.buffer.name];
                case 3:
                    name = _a.sent();
                    if (name && /\.post$/i.test(name)) {
                        doc.buffer.setOption('filetype', 'post');
                    }
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
}
function activate(context) {
    return __awaiter(this, void 0, void 0, function () {
        var config, isEnable, isDetect, postRootPath;
        return __generator(this, function (_a) {
            config = coc_nvim_1.workspace.getConfiguration('post');
            isEnable = config.get('enable', true);
            if (!isEnable) {
                return [2 /*return*/];
            }
            isDetect = config.get('detect', true);
            postRootPath = config.get('root', '~/.coc-post')
                .replace(/^~/, os_1.homedir());
            if (isDetect) {
                context.subscriptions.push(coc_nvim_1.workspace.registerAutocmd({
                    event: 'BufEnter',
                    request: false,
                    callback: detectFileName
                }));
            }
            context.subscriptions.push(coc_nvim_1.languages.registerCompletionItemProvider('post', 'post', ['post'], completion_1.completionProvider, [], 99));
            context.subscriptions.push(coc_nvim_1.commands.registerCommand('post.do', do_post_1.doPost));
            context.subscriptions.push(coc_nvim_1.commands.registerCommand('post.new', function () {
                new_post_1.newPost(postRootPath);
            }));
            context.subscriptions.push(coc_nvim_1.listManager.registerList(new post_1.default(postRootPath)));
            return [2 /*return*/];
        });
    });
}
exports.activate = activate;
//# sourceMappingURL=index.js.map