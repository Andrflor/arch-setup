"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Red Hat. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const vscode_languageserver_1 = require("vscode-languageserver");
const yamlLanguageService_1 = require("../src/languageservice/yamlLanguageService");
const testHelper_1 = require("./testHelper");
const yamlParser_1 = require("../src/languageservice/parser/yamlParser");
var assert = require('assert');
function createLanguageServiceWithCustomTags(customTags) {
    let languageService = yamlLanguageService_1.getLanguageService(testHelper_1.schemaRequestService, testHelper_1.workspaceContext, [], null);
    let languageSettings = {
        schemas: [],
        validate: true,
        customTags: customTags
    };
    const uri = 'http://json.schemastore.org/bowerrc';
    let fileMatch = ["*.yml", "*.yaml"];
    languageSettings.schemas.push({ uri, fileMatch: fileMatch });
    languageService.configure(languageSettings);
    return languageService;
}
// Defines a Mocha test suite to group tests of similar kind together
suite("Custom Tag tests Tests", () => {
    function setup(content) {
        return vscode_languageserver_1.TextDocument.create("file://~/Desktop/vscode-k8s/test.yaml", "yaml", 0, content);
    }
    function parseSetup(content, customTags) {
        let testTextDocument = setup(content);
        let languageService = createLanguageServiceWithCustomTags(customTags);
        let yDoc = yamlParser_1.parse(testTextDocument.getText(), customTags);
        return languageService.doValidation(testTextDocument, yDoc);
    }
    describe('Test that validation does not throw errors', function () {
        it('Custom Tags without type not specified', (done) => {
            let content = `scalar_test: !Test test_example`;
            let validator = parseSetup(content, ["!Test"]);
            validator.then(function (result) {
                assert.equal(result.length, 0);
            }).then(done, done);
        });
        it('Custom Tags with one type', (done) => {
            let content = `resolvers: !Ref\n  - test`;
            let validator = parseSetup(content, ["!Ref sequence"]);
            validator.then(function (result) {
                assert.equal(result.length, 0);
            }).then(done, done);
        });
        it('Custom Tags with multiple types', (done) => {
            let content = `resolvers: !Ref\n  - test`;
            let validator = parseSetup(content, ["!Ref sequence", "!Ref mapping", "!Ref scalar"]);
            validator.then(function (result) {
                assert.equal(result.length, 0);
            }).then(done, done);
        });
        it('Allow multiple different custom tag types with different use', (done) => {
            let content = "!test\nhello: !test\n  world";
            let validator = parseSetup(content, ["!test scalar", "!test mapping"]);
            validator.then(function (result) {
                assert.equal(result.length, 0);
            }).then(done, done);
        });
        it('Allow multiple different custom tag types with multiple different uses', (done) => {
            let content = "!test\nhello: !test\n  world\nsequence: !ref\n  - item1";
            let validator = parseSetup(content, ["!test scalar", "!test mapping", "!ref sequence", "!ref mapping"]);
            validator.then(function (result) {
                assert.equal(result.length, 0);
            }).then(done, done);
        });
    });
    describe('Test that validation does throw errors', function () {
        it('Error when custom tag is not available', (done) => {
            let content = "!test";
            let validator = parseSetup(content, []);
            validator.then(function (result) {
                assert.equal(result.length, 2);
            }).then(done, done);
        });
    });
});
//# sourceMappingURL=customTags.test.js.map